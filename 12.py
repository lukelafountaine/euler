#! /usr/bin/env python

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
#
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

import math
from itertools import count


def get_triangles():
    triangle = 0
    for x in count(1):
        triangle += x
        yield triangle


def get_divisors(n):
    divisors = []

    bound = int(math.floor(math.sqrt(n)))
    if bound ** 2 == n:
        divisors.append(bound)
        bound -= 1

    divisor = 1

    while divisor <= bound:
        if n % divisor == 0:
            divisors.append(divisor)
            divisors.append(n / divisor)
        divisor += 1

    return list(divisors)


for num in get_triangles():
    if len(get_divisors(num)) > 500:
        print num
        break
